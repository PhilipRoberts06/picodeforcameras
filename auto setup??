import os
import requests
import time
import json

def setup():
    print("Welcome to the Raspberry Pi Camera Setup Wizard!")
    print("Please provide the following details for configuring this Raspberry Pi.\n")

    # Gather information about the location and server
    state = input("Enter the state: ").strip()
    city = input("Enter the city: ").strip()
    country = input("Enter the country: ").strip()
    local_ip = input("Enter the local IP address of this Raspberry Pi: ").strip()
    port = input("Enter the port you want the web server to run on (default: 8080): ").strip() or "8080"

    # Ask about the cameras
    num_cameras = int(input("\nEnter the number of cameras to configure: "))
    cameras = []

    for i in range(1, num_cameras + 1):
        print(f"\n--- Camera {i} Configuration ---")
        camera_name = input(f"Enter a name for Camera {i} (e.g., Camera001): ").strip()
        camera_url = input(f"Enter the local IP or URL for Camera {i} (e.g., http://192.168.1.10/snap.jpeg): ").strip()
        camera_path = f"/home/webservers/cameras/{camera_name}/snap.jpeg"

        # Save the camera details
        cameras.append({
            "name": camera_name,
            "url": camera_url,
            "path": camera_path
        })

    # Return the full configuration
    return {
        "state": state,
        "city": city,
        "country": country,
        "local_ip": local_ip,
        "port": port,
        "cameras": cameras
    }

def generate_directories(cameras):
    print("\nCreating necessary directories...")
    for camera in cameras:
        folder_path = os.path.dirname(camera["path"])
        if not os.path.exists(folder_path):
            os.makedirs(folder_path)
            print(f"Created folder: {folder_path}")

def fetch_image(camera):
    try:
        response = requests.get(camera["url"], timeout=10)
        if response.status_code == 200:
            with open(camera["path"], "wb") as file:
                file.write(response.content)
            print(f"{camera['name']}: Image updated successfully.")
        else:
            print(f"{camera['name']}: Failed to fetch image. Status code: {response.status_code}")
    except Exception as e:
        print(f"{camera['name']}: Error fetching image. {e}")

def start_fetch_loop(cameras):
    print("\nStarting to fetch images from cameras...")
    while True:
        for camera in cameras:
            fetch_image(camera)
        time.sleep(1)  # Adjust the interval as needed

def start_http_server(port):
    print(f"\nStarting the web server on port {port}...")
    os.chdir("/home/webservers/cameras")
    os.system(f"python3 -m http.server {port}")

if __name__ == "__main__":
    # Run the setup wizard
    config = setup()

    # Display the summary
    print("\n--- Configuration Summary ---")
    print(f"Location: {config['city']}, {config['state']}, {config['country']}")
    print(f"Local IP: {config['local_ip']}")
    print(f"Port: {config['port']}")
    print("Configured Cameras:")
    for cam in config["cameras"]:
        print(f"  - {cam['name']} ({cam['url']} -> {cam['path']})")

    # Generate directories for cameras
    generate_directories(config["cameras"])

    # Save the configuration to a JSON file for future use
    with open("/home/webservers/config.json", "w") as config_file:
        json.dump(config, config_file, indent=4)
    print("\nConfiguration saved to /home/webservers/config.json.")

    # Ask if the user wants to start the server and fetch loop
    start_server = input("\nDo you want to start the web server now? (yes/no): ").strip().lower() == "yes"
    if start_server:
        print("\nStarting web server and fetch loop...")

        # Fetch images in the background and start the server
        try:
            from threading import Thread
            Thread(target=start_fetch_loop, args=(config["cameras"],), daemon=True).start()
            start_http_server(config["port"])
        except KeyboardInterrupt:
            print("\nServer stopped. Goodbye!")
    else:
        print("\nSetup complete. You can start the server later.")
